// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique @db.VarChar(100)
  username String @db.VarChar(100)
  password String @db.VarChar(100)
  phone String @unique @db.VarChar(15)
  token String? @db.VarChar(255)

  transaction transaction[]

  @@map("users")
}

model clothes {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  price Float
  description String @db.VarChar(255)
  image String @db.VarChar(255)
  category String @db.VarChar(100)
  size String @db.VarChar(100)
  color String @db.VarChar(100)
  stock Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactionDetail transactionDetail[]
  @@map("clothes")
}

model transaction {
  id Int @id @default(autoincrement())
  userId Int
  total Float
  status String @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  transactionDetail transactionDetail[]
  @@map("transaction")
}

model transactionDetail {
  id Int @id @default(autoincrement())
  transactionId Int
  clothesId Int
  quantity Int
  price Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transaction transaction @relation(fields: [transactionId], references: [id])
  clothes clothes @relation(fields: [clothesId], references: [id])
  @@map("transaction_detail")
}